@import "util.js";
@import "config.js";

function revealInFinder( path ) {
    // Open folder in Finder
    var workspace = NSWorkspace.alloc().init();
    [workspace selectFile:path inFileViewerRootedAtPath:@""];
}

function manageFilesLocally( context ) {
	var doc = context.document,
		config = Config.create( context ),
		fileManager = [NSFileManager defaultManager],
		settingsPath = config.getSettingsPath(),
		documentsSettingsPath = config.getDocumentsSettingsPath(),
		userManifest,
		
		alert = [[NSAlert alloc] init],
		alertVal,
		err = [[MOPointer alloc] init];

	[alert setMessageText:"Save Settings Locally"];
    [alert setInformativeText:[( context.plugin ) name] + " settings will be saved to your Documents folder"];
    [alert addButtonWithTitle:"OK"];
    [alert addButtonWithTitle:"Cancel"];

    alertVal = [alert runModal];

    if( alertVal === NSAlertFirstButtonReturn ) {
    	// Update manifest before copying
		userManifest = config.syncSettingsWithDefault( config.getSettingsManifest() );
		config.setSettingsManifest( userManifest );

		// Copying
		if( [fileManager fileExistsAtPath:settingsPath] ) {
			// Create destination folder if it doesn't exist
			if( ![fileManager fileExistsAtPath:documentsSettingsPath] ) {
                [fileManager createDirectoryAtPath:util.getPathByDeletingLastPathComponent( documentsSettingsPath ) withIntermediateDirectories:true attributes:nil error:nil];
            
                // Exclude from iCloud backup
                // [[NSURL fileURLWithPath:util.getPathByDeletingLastPathComponent( documentsSettingsPath )] setResourceValue:true forKey:NSURLIsExcludedFromBackupKey error:err];

                // if( err.value() ) {
                // 	log( err.value() );
                // }
            }
	        
	        [fileManager copyItemAtPath:settingsPath toPath:documentsSettingsPath error:nil];        
	    }
	    doc.showMessage( "You Rock!" );
    }
}
function revealExportFilesInFinder( context ) {
	var config = Config.create( context );

	revealInFinder( config.getExportFolderPath() );
}
function revealSettingsInFinder( context ) {
	var config = Config.create( context );

	revealInFinder( config.getSettingsPath() );
}